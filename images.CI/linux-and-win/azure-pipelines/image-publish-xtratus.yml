############################################################
## Pipeline template that publish a VM Image             ###
##    to an Azure Image Library                          ###
#  - All gallery related variables                       ###
#      are readed from variable group                    ###
#                                                        ###
############################################################

parameters:
  - name: job_id
    type: string
    default: 'generate_image'
  
  - name: image_type
    type: string

  - name: agent_pool
    type: object
    default: 'Agent Pool Linux'

  - name: variable_group_name
    type: string
    default: 'devops-agents-generation-shared'

  - name: repository_ref
    type: string
    default: 'self'

  - name: managed_image_name
    type: string
    displayName: 'Name of the Image Definition in the Azure Compute Gallery.'

  - name: source_managed_image
    type: string
    displayName: 'Resource Id of the VM Image to be published.'

  - name: azureServiceConnection
    type: string
    displayName: 'Name of the AzureRM service connection used to publish.'
  
  - name: replica_count
    type: number
    default: 1
    displayName: 'The default number of replicas to be created per region.'
    

jobs:
- job: ${{ parameters.job_id }}
  displayName: Image Publish (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool: ${{ parameters.agent_pool }}
  variables:
  - group: ${{ parameters.variable_group_name }}

  steps:
    - checkout: ${{ parameters.repository_ref }}
      fetchTags: true
      persistCredentials: true

    - task: gittools.gittools.setup-gitversion-task.gitversion/setup@0 
      displayName: 'gitversion: install'
      inputs:
        versionSpec: 5.x

    - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
      displayName: 'gitversion: execute'

    - task: AzureCLI@2
      displayName: 'az: publish image'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $params = New-Object System.Collections.ArrayList
          $params = @{
            [void]$commandParams.Add("--gallery-name"); [void]$commandParams.Add("$(IMAGE_GALLERY_NAME)");
            [void]$commandParams.Add("--resource-group"); [void]$commandParams.Add("$(IMAGE_GALLERY_RESOURCE_GROUP)");
            [void]$commandParams.Add("--gallery-image-definition"); [void]$commandParams.Add("${{ parameters.managed_image_name }}");
            [void]$commandParams.Add("--gallery-image-version"); [void]$commandParams.Add("$(GitVersion.MajorMinorPatch)");
            [void]$commandParams.Add("--subscription"); [void]$commandParams.Add("$(IMAGE_GALLERY_SUBSCRIPTION_ID)");
            [void]$commandParams.Add("--replica-count"); [void]$commandParams.Add(${{ parameters.replica_count }});
            [void]$commandParams.Add("--storage-account-type"); [void]$commandParams.Add("$(IMAGE_GALLERY_REPLICATION)");
            [void]$commandParams.Add("--target-regions"); [void]$commandParams.Add("$(IMAGE_REPLICATION_REGIONS)");
            [void]$commandParams.Add("--managed-image"); [void]$commandParams.Add("${{ parameters.source_managed_image }}");
            [void]$commandParams.Add("--tags"); [void]$commandParams.Add("SourceImage=${{ parameters.source_managed_image }}");
            [void]$commandParams.Add("--no-wait")
          }
          Write-Host "Publishing image with parameters [$($params | ConvertTo-Json)]"
          az sig image-version create @params

    - script: |
        git config --global user.name "gitversion"
        git tag $(GitVersion.MajorMinorPatch)
        git push origin $(GitVersion.MajorMinorPatch)
      displayName: 'git: set tag'
      continueOnError: false