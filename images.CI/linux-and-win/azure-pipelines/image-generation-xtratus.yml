# Ideally we would use GitHub Actions for this, but since we use self-hosted machines to run image builds
# we need the following features to use GitHub Actions for Images CI:
# - https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/m-p/30678#M508
# - https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504
# - https://github.community/t5/GitHub-Actions/Protecting-github-workflows/td-p/30290

parameters:
  - name: job_id
    type: string
    default: 'generate_image'

  - name: image_type
    type: string

  - name: image_os
    type: string

  - name: image_template_name
    type: string

  - name: image_readme_name
    type: string

  - name: agent_pool
    type: object

  - name: variable_group_name
    type: string

  - name: repository_ref
    type: string
    default: 'self'

  - name: azureServiceConnection
    type: string
    displayName: 'Name of the AzureRM service connection used to publish.'


jobs:
- job: ${{ parameters.job_id }}
  displayName: Image Generation (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool: ${{ parameters.agent_pool }}
  variables:
  - group: ${{ parameters.variable_group_name }}

  steps:
  - checkout: ${{ parameters.repository_ref }}

  - task: PowerShell@2
    displayName: 'git: Download custom repository'
    condition: and(ne(variables['CUSTOM_REPOSITORY_URL'], ''), ne(variables['CUSTOM_REPOSITORY_BRANCH'], ''))
    inputs:
      targetType: 'filePath'
      filePath: ./images.CI/download-repo.ps1
      arguments: -RepoUrl $(CUSTOM_REPOSITORY_URL) `
                 -RepoBranch $(CUSTOM_REPOSITORY_BRANCH)

  - task: gittools.gittools.setup-gitversion-task.gitversion/setup@0
    displayName: 'gitversion: install'
    inputs:
      versionSpec: 5.x

  - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
    displayName: 'gitversion: execute'
        
  - pwsh: |
      Write-Host "Image version that will be published: $(GitVersion.SemVer)"
      Write-Host "##vso[build.updatebuildnumber]$(GitVersion.SemVer)"
    name: setvar
    displayName: 'devops: set build number'
 
  - task: PowerShell@2
    displayName: 'Set image template variables'
    inputs:
      targetType: 'inline'
      script: |
        $ImageType = "${{ parameters.image_type }}"
        $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "ubuntu" } else { "windows" }
        $TemplateDirectoryPath = Join-Path "images" $TemplateDirectoryName | Resolve-Path
        $TemplatePath = Join-Path $TemplateDirectoryPath templates
        Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
        Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"
       
  - task: riezebosch.Packer.PackerTool.PackerTool@0
    displayName: 'devops: download Packer'

  - task: AzureCLI@2
    displayName: 'az: Build VM'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: pscore
      scriptLocation: scriptPath
      scriptPath: ./images.CI/linux-and-win/build-image.ps1
      arguments: -TenantId $(az account show --query "tenantId" -o tsv) `
                 -UseAzureCliAuth "true" `
                 -SubscriptionId $(ARM_SUBSCRIPTION_ID) `
                 -Location $(BUILD_LOCATION) `
                 -ImageResourceGroupName $(BUILD_RESOURCE_GROUP_NAME) `
                 -TempResourceGroupName $(BUILD_RESOURCE_GROUP_NAME) `
                 -ImageOS ${{ parameters.image_os }} `
                 -VirtualNetworkName $(VNET_NAME) `
                 -VirtualNetworkRG $(VNET_RESOURCE_GROUP) `
                 -VirtualNetworkSubnet $(VNET_SUBNET) `
                 -ImageName "$(managed_image_name)_$(GitVersion.SemVer)"
                 -TemplatePath $(TemplatePath) `
                 -BuildTemplateName  ${{ parameters.image_template_name }}
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: "$(Agent.TempDirectory)/packer-log.txt"

  - task: PowerShell@2
    displayName: 'devops: copy image artifacts to the separate directory'
    inputs:
      targetType: 'inline'
      script: |
        $readmePath = Join-Path "$(TemplateDirectoryPath)" "${{ parameters.image_readme_name }}"
        $softwareReportPath = Join-Path "$(TemplateDirectoryPath)" "software-report.json"

        Copy-Item -Path $readmePath -Destination "$(Build.ArtifactStagingDirectory)/"
        if (Test-Path $softwareReportPath) {
            Copy-Item -Path $softwareReportPath -Destination "$(Build.ArtifactStagingDirectory)/"
        }

  - task: PowerShell@2
    displayName: 'devops: print markdown software report'
    inputs:
      targetType: 'inline'
      script: |
        Get-Content -Path "$(Build.ArtifactStagingDirectory)/${{ parameters.image_readme_name }}"

  - task: PowerShell@2
    displayName: 'devops: print json software report'
    inputs:
      targetType: 'inline'
      script: |
        $softwareReportPath = "$(Build.ArtifactStagingDirectory)/software-report.json"
        if (Test-Path $softwareReportPath) {
            Get-Content -Path $softwareReportPath
        }

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'Built_VM_Artifacts'
    displayName: 'devops: publish artifacts'

  - task: PowerShell@2
    displayName: 'devops: print provisioners duration'
    inputs:
      targetType: 'filePath'
      filePath: ./images.CI/measure-provisioners-duration.ps1
      arguments: -PackerLogPath "$(Agent.TempDirectory)/packer-log.txt" `
                        -PrefixToPathTrim "$(TemplateDirectoryPath)" `
                        -PrintTopNLongest 25
